high level:
  - both functions are essentially doing the same thing. you have to
  - - area_id, collection_function => geospatial_data
    - connect to database
    - "query database ; tables:"
    - - create a FeatureCollection for the area; just put a fuckton of features in it
      - Document > Folder per table > Placemark per row
    - return data
    - the function should be able to recur on itself, and 
    - - combine area FeatureCollections into multi-area FeatureCollections
      - combine area folders into a single document
    - close connection

testing:
  point_of_interest_data:
    query: |
      SELECT ST_AsGeoJSON(geom), name, type
        FROM points_of_interest
        WHERE area_id=397;
    output: |
       #name, type
       {"type":"Point","coordinates":[-114.931216207695,49.3096484265684]} | Parking     | Parking
       {"type":"Point","coordinates":[-114.753594914178,49.1604930993752]} | Cabin       | Cabin
       {"type":"Point","coordinates":[-114.646005244746,49.1704213207037]} | Hunger Lake | Destination
       {"type":"Point","coordinates":[-114.7369057841,49.1297314898215]}   | Cabin Pass  | Destination

kml:
  simplest implementation: |
    return tokml(geojsonObject, {
      documentName: area,
      documentDescription: `kml of ${area}`,
    }

dependencies:
  - npm install geojson
  - npm install wkx
  - npm install kml
  - npm install kml-utils
  - npm install --save tokml
  - npm install kmlwriter
  - npm install kml-stream

libraries:
  - https://www.npmjs.com/package/wkx
  - https://www.npmjs.com/package/geojson
  - https://www.npmjs.com/package/kml
  - https://www.npmjs.com/package/kml-utils
  - https://www.npmjs.com/package/tokml
  - https://www.npmjs.com/package/kmlwriter
  - https://www.npmjs.com/package/kml-stream

styling:
 polygons:
   green: #55ff00
   blue: #0000ff
   black: #000000
   outline: none
   transparency: 50%

skellyman function:
  - 'return type' => function
    #FeatureCollection: \\ FeatureCollection: \\ geometry: LineString \\ properties:  \\ type: "access_road" \\ database_id: id \\ description: description \\ Feature: \\ geometry: LineString \\ properties: \\ type: "avalanche_path" \\ name: name \\ database_id: id \\ Feature: \\ geometry: Point  \\ properties: \\ type: "point_of_interest" \\ name: name \\ database_id: id \\ Feature:  \\ Point: decision_points \\ properties: decision_points_warnings \\ Feature: \\ Polygon: zones
